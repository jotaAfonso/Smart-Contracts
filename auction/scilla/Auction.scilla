scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)

import BoolUtils as BoolU

library Auction

let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg
    
    
let bid_too_low_code = Int32 1
let first_bid_accepted_code  = Int32 2
let bid_accepted_code  = Int32 3
let money_sent_code  = Int32 4
let nothing_to_withdraw_code  = Int32 5
let auction_is_still_on_code  = Int32 6
let auction_end_code  = Int32 7
let already_the_highest_bidder = Int32 8 

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract Auction
(*  Parameters *)
(
 beneficiary  : ByStr20
)

(* Mutable fields *)
field highestBidder  : Option ByStr20  = None {ByStr20}
field highestBid     : Uint128 = Uint128 0
field pendingReturns : Map ByStr20 Uint128 = Emp ByStr20 Uint128
field ended : Bool = False
field hasFundsToWithdraw : Bool = False

(* Bidding on the auction, if auction is has not ended and the bid sent is higher than the current highest bid *)
transition Bid ()
  (* Checks if auction still live *)
  eFlag <- ended;
  c1 = BoolU.negb eFlag;
  (* Checks if it has funds to refund *)
  fundsW <- hasFundsToWithdraw;
  c2 = BoolU.negb fundsW;
  (* Checks that auction is live and has no pending refunds *)
  is_biddingAvailable = BoolU.andb c1 c2;
  match is_biddingAvailable with
  | False => 
    e = {_eventname: "Auction is not available for bidding."};
    event e;
    msg  = {_tag : ""; _recipient : _sender; _amount : Uint128 0; code : auction_end_code};
    msgs = one_msg msg;
    send msgs
  
  | True =>
    (* Checks if the highest bid lower than the amount received *)
    hb <- highestBid;
    sufficientBid = builtin lt hb _amount;
    match sufficientBid with 
    | False =>
      e = {_eventname: "Bid failled."; highest_bid: hb; sent_bid: _amount};
      event e;
      msg  = {_tag : ""; _recipient : _sender; _amount : Uint128 0; code : bid_too_low_code};
      msgs = one_msg msg;
      send msgs
    | True =>
      accept;
      
      (* Check if there is a higest bidder *)
      hbPrev <- highestBidder;
      match hbPrev with
      (* There is already a highest bidder *)
      | Some prevHighestBidder =>
        pendingReturnsForPrevHB <- pendingReturns[prevHighestBidder];
        getPRForPrevHighestBidder = match pendingReturnsForPrevHB with
        (* User already has some balance in the pending returns that is not claimed *)
        | Some pendingReturnsForPrevHB =>
          builtin add hb pendingReturnsForPrevHB
        (* Prev highest bidder has no pending returns. *)
        | None => hb
        end;
      
      is_newHighestBidder = builtin eq prevHighestBidder _sender;
      match is_newHighestBidder with
      | True =>
        (* Update pending returns of previous highest Bidder *)
        pendingReturns[prevHighestBidder] := getPRForPrevHighestBidder;
        
        (* Update the highest bidder and highest bid *)
        bidder = Some {ByStr20} _sender;
        highestBidder := bidder;
        highestBid := _amount;
        val = True;
        hasFundsToWithdraw := val;
        e = {_eventname: "Bid accepted."; code: bid_accepted_code; addr: _sender; amount: _amount};
        event e
      | False =>
         e = {_eventname: "Bid rejected."; code: already_the_highest_bidder; addr: _sender; amount: _amount};
        event e;
        msg  = {_tag : ""; _recipient : _sender; _amount : _amount; code : already_the_highest_bidder};
        msgs = one_msg msg;
        send msgs
      end
    | None =>
      (* Process first bid *)
      first_bidder = Some {ByStr20} _sender;
      highestBidder := first_bidder;
      highestBid := _amount;
      e = {_eventname: "Bid accepted."; code: first_bid_accepted_code; addr: _sender; amount: _amount};
      event e
    end 
    end
  end
end  
  
(* Bidders getting refunds, if bidder has a pending return *)
transition Withdraw ()
  hasFundsToRefund <- hasFundsToWithdraw;
  match hasFundsToRefund with
  | True=>
    pr <- pendingReturns[_sender];
    match pr with
    | None =>
      msg  = {_tag : ""; _recipient : _sender; _amount : Uint128 0; code : nothing_to_withdraw_code};
      msgs = one_msg msg;
      send msgs
    | Some v =>
      delete pendingReturns[_sender];
      val = False;
      hasFundsToWithdraw := val;
      e = {_eventname: "Withdraw Successful."; addr: _sender};
      event e;
      msg  = {_tag : ""; _recipient : _sender; _amount : v; code : money_sent_code};
      msgs = one_msg msg;
      send msgs
    end
  | False =>
    e = {_eventname: "Has no pending refunds."};
    event e
  end 
end

(* Ends Auction, if the transaction sender is the owner and the contract is still live. *)
transition AuctionEnd ()
  (* Checks if auction still live *)
  eFlag <- ended;
  c1 = BoolU.negb eFlag; 
  (* Checks if sender is the owner *)
  is_owner = builtin eq beneficiary _sender;
  condition = BoolU.andb is_owner c1;
  match condition with
  | False =>
    e = {_eventname: "Auction still live ended,"; code: auction_is_still_on_code};
    event e
  | True =>
    val = True;
    ended := val;
    hb <- highestBid;
    e = {_eventname: "Auction ended."; highest_bid: hb};
    event e;
    msg  = {_tag : ""; _recipient : beneficiary; _amount : hb; code : auction_end_code; highest_bid : hb};
    msgs = one_msg msg;
    send msgs
  end
end

(* Winner checker, if auction as ended. *)
transition AuctionWinner ()
  eFlag <- ended;
  match eFlag with
  | False =>
    e = {_eventname: "Auction is still live."; code: auction_is_still_on_code};
    event e
  | True =>
    hb <- highestBidder;
    match hb with
    | None =>  
      e = {_eventname: "There was no Auction winner." };
      event e
    | Some winner =>
      is_winner = builtin eq winner _sender;
      match is_winner with 
      | True =>
        e = {_eventname: "You are the Auction winner."; winner: winner; checker: _sender };
        event e
      | False =>
        e = {_eventname: "You are not the Auction winner."; winner: winner; checker: _sender };
        event e
      end
    end
  end 
end
