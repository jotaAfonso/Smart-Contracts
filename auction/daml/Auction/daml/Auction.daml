module Auction where


-- Imports

import DA.Map


-- Data

type AuctionId = ContractId Auction

data AuctionStateType 
  = StartedState   
  | BiddingState
  | WithdrawingState 
  | AuctionClosedState
    deriving (Eq, Show)

data BidderInfo 
  = BidderInfo {
    bidder : Party,
    currentBid : Int 
  } deriving (Eq, Show)

data AuctionInfo
  = Bidd

----- template

template Auction
  with 
    beneficiary    : Party
    currentHBidder : BidderInfo
    pendingReturns : Map Party Int
    state          : AuctionStateType
    newBidder      : Party
  where
    signatory beneficiary 
    ensure beneficiary /= currentHBidder.bidder 
    observer currentHBidder.bidder
    choice Bid : AuctionId
      with
        biddingAmount : Int
      controller newBidder
      do          
          assertMsg "Invalid state of contract." (this.state == StartedState || this.state == WithdrawingState)
          assertMsg "Invalid bid, due to low value." (biddingAmount > currentHBidder.currentBid) 
          
          create this with
              currentHBidder = BidderInfo newBidder biddingAmount
              pendingReturns = insert this.currentHBidder.bidder this.currentHBidder.currentBid this.pendingReturns
              state = BiddingState
    
    choice Withdraw : AuctionId 
      controller newBidder
      do 
          assertMsg "Does not have pending returns." (member newBidder pendingReturns)
          create this with
              pendingReturns = insert this.currentHBidder.bidder 0 this.pendingReturns
              state = WithdrawingState
    
    choice EndAuction : AuctionId 
      controller beneficiary
      do 
          assertMsg "Invalid state of contract." (this.state /= AuctionClosedState)
          create this with
              state = AuctionClosedState

template AuctionApp
  with 
    beneficiary   : Party
    currentBidder : Party
  where
    signatory beneficiary 
    observer currentBidder
    choice Build : AuctionId
      controller beneficiary
      do
        create Auction 
          with
            beneficiary    = this.beneficiary
            currentHBidder = BidderInfo this.currentBidder 0
            pendingReturns = empty
            state          = StartedState 
            newBidder      = this.currentBidder
