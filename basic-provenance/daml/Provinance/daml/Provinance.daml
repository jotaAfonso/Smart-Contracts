module Provinance where

import Daml.Script

type ProvinanceId = ContractId Provinance

data ProvinanceStateType 
  = CreatedState   
  | InTransitState
  | CompletedState
    deriving (Eq, Show)

template Provinance
  with 
    initiater       : Party
    counter         : Party
    previouscounter : Party
    chainOwner      : Party
    chainObserver   : Party
    state           : ProvinanceStateType
  where
    signatory initiater
    observer counter
    choice TransferResponsibility : ProvinanceId
      with
        newCounter : Party
      controller counter
      do          
          assertMsg "Invalid state of contract." (this.state /= CompletedState)
          create this with
              previouscounter = this.counter
              counter = newCounter
              state = InTransitState
    choice Complete : ProvinanceId 
      controller chainOwner
      do 
          assertMsg "Invalid state of contract." (this.state /= CompletedState)
          create this with
              previouscounter = this.counter
              counter = this.chainOwner
              state = CompletedState


template ProvinanceApp
  with 
    initiater       : Party
    chainOwner      : Party
    chainObserver   : Party
  where
    signatory initiater 
    choice Build : ProvinanceId
      controller initiater
      do
        create Provinance 
          with
            initiater       = this.initiater
            counter         = this.initiater
            previouscounter = this.initiater
            chainOwner      = this.chainOwner
            chainObserver   = this.chainObserver
            state           = CreatedState

setup : Script ProvinanceId
setup = script do    
-- user_setup_begin
  alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")
  bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")
  aliceId <- validateUserId "alice"
  bobId <- validateUserId "bob"
  createUser (User aliceId (Some alice)) [CanActAs alice]
  createUser (User bobId (Some bob)) [CanActAs bob]
-- user_setup_end

  test <- submit alice do
    createCmd ProvinanceApp with
      initiater = alice
      chainOwner = alice
      chainObserver = bob

  test <- submit alice do
    exerciseCmd test Build
    
  test <- submit alice do
    exerciseCmd test TransferResponsibility with newCounter = bob

  test <- submit bob do
    exerciseCmd test TransferResponsibility with newCounter = alice

  test <- submit alice do
    exerciseCmd test TransferResponsibility with newCounter = bob

  submit alice do
    exerciseCmd test Complete